service: genai-quiz-backend
frameworkVersion: '3'

plugins:
  - serverless-iam-roles-per-function
  - serverless-step-functions
  - serverless-dotenv-plugin

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  timeout: 60
  region: ${opt:region, env:AWS_DEFAULT_REGION, 'us-east-1'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
  apiGateway:
    apiKeys:
      - genai-key

custom:
  s3_bucket_name: ${self:service}-genaiquiz
  dynamodb_name: ${self:service}-genaiquiz
  iot_name: ${self:service}-genaiquiz
  region: us-east-1

functions:
  forwardYoutubeLink:
    handler: src/functions/quiz/forward-link.handler
    environment:
      STATE_MACHINE_ARN: ${self:outputs.GenerateQuestionStateMachine.Value}
      IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "states:StartExecution"
        Resource:
          - "*"
      - Effect: Allow
        Action:
        - iot:*
        Resource: '*'
    events:
      - http: 
          path: add-link
          method: post
          cors: true
          private: true
  forwardS3Details:
    handler: src/functions/quiz/forward-document.handler
    environment:
      STATE_MACHINE_ARN: ${self:outputs.GenerateQuestionStateMachine.Value}
      IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "states:StartExecution"
        Resource:
          - "*"
      - Effect: Allow
        Action:
        - iot:*
        Resource: '*'
    events:
      - s3:
          bucket: ${self:custom.s3_bucket_name}
          event: s3:ObjectCreated:*
          rules:
            - prefix: public/
            - suffix: .pdf
          existing: true
          forceDeploy: true
  extractText:
    handler: src/functions/stepfunctions/extract-pdf-content.handler
    environment:
      IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
    iamRoleStatements:
      - Effect: Allow
        Action:
        - iot:*
        Resource: '*'
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - "arn:aws:s3:::${self:custom.s3_bucket_name}/*"
  extractTranscript:
    handler: src/functions/stepfunctions/extract-youtube-transcript.handler
    environment:
      IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
    iamRoleStatements:
      - Effect: Allow
        Action:
        - iot:*
        Resource: '*'

  generateQuestionPdf:
    handler: src/functions/stepfunctions/generate-question-pdf.handler
    environment:
      IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
    iamRoleStatements:
      - Effect: Allow
        Action:
          - bedrock:InvokeModel
        Resource:
          - "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-instant-v1"
      - Effect: Allow
        Action:
          - iot:*
        Resource: '*'
  generateQuestionYoutube:
    handler: src/functions/stepfunctions/generate-question-youtube.handler
    environment:
      IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
    iamRoleStatements:
      - Effect: Allow
        Action:
          - bedrock:InvokeModel
        Resource:
          - "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-instant-v1"
      - Effect: Allow
        Action:
          - iot:*
        Resource: '*'
  
  saveQuestionDynamoDb:
    handler: src/functions/stepfunctions/save-question-dynamodb.handler
    environment:
      DYNAMODB_NAME: ${self:custom.dynamodb_name}
      IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - !GetAtt GenAiQuizDB.Arn
      - Effect: Allow
        Action:
        - iot:*
        Resource: '*'

stepFunctions:
  stateMachines:
    GenerateQuestion:
      name: GenerateQuestionMachine
      definition:
        Comment: "State machine for processing PDF uploads and YouTube links"
        StartAt: DetermineSource
        States:
          DetermineSource:
            Type: Choice
            Choices:
              - Variable: "$.source"
                StringEquals: "s3"
                Next: ExtractText
              - Variable: "$.source"
                StringEquals: "youtube"
                Next: ExtractTranscript
            Default: Fail
          ExtractText:
            Type: Task
            Resource: !GetAtt extractText.Arn
            Next: DetermineQuestionGenerator
          ExtractTranscript:
            Type: Task
            Resource: !GetAtt extractTranscript.Arn
            Next: DetermineQuestionGenerator
          DetermineQuestionGenerator:
            Type: Choice
            Choices:
              - Variable: "$.source"
                StringEquals: "s3"
                Next: GenerateQuestionPdf
              - Variable: "$.source"
                StringEquals: "youtube"
                Next: GenerateQuestionYoutube
            Default: Fail
          GenerateQuestionPdf:
            Type: Task
            Resource: !GetAtt generateQuestionPdf.Arn
            Next: SaveQuestionDynamoDb
          GenerateQuestionYoutube:
            Type: Task
            Resource: !GetAtt generateQuestionYoutube.Arn
            Next: SaveQuestionDynamoDb
          SaveQuestionDynamoDb:
            Type: Task
            Resource: !GetAtt saveQuestionDynamoDb.Arn
            Next: IsQuestionSaved
          IsQuestionSaved:
            Type: Choice
            Choices:
            - Variable: "$.status"
              StringEquals: SUCCESS
              Next: Success
            - Variable: "$.status"
              StringEquals: ERROR
              Next: Fail
          Success:
            Type: Succeed
          Fail:
            Type: Fail
            Error: "InvalidSource"
            Cause: "The provided source is not valid."

resources:
  Resources:   
    # User pool 
    GenAiQuizUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameConfiguration:
          CaseSensitive: false
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            RequireSymbols: true
        Schema:
          - AttributeDataType: String
            Mutable: false
            Required: true
            Name: email
            StringAttributeConstraints: 
              MinLength: '8'

    GenAiQuizUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: web
        UserPoolId: !Ref GenAiQuizUserPool
        ExplicitAuthFlows:
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        PreventUserExistenceErrors: ENABLED

    GenAiQuizIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: genai_quiz_identity_pool
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId:
              Ref: GenAiQuizUserPoolClient
            ProviderName:
              Fn::GetAtt: [GenAiQuizUserPool, ProviderName]
    
    # Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: GenAiQuizIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}_appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: GenAiQuizIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - iot:Connect
                    - iot:Subscribe
                    - iot:Receive
                  Resource: "*"

    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}_appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: GenAiQuizIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - iot:Connect
                    - iot:Subscribe
                    - iot:Receive
                  Resource: "*"
                - Effect: "Allow"
                  Action: 
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource: "arn:aws:s3:::${self:custom.s3_bucket_name}/public/*"
    
    # S3 Bucket
    UploadedS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3_bucket_name}
        LifecycleConfiguration:
          Rules:
            - Id: DeleteRule
              Status: Enabled
              ExpirationInDays: 14
        CorsConfiguration:
          CorsRules:
          - AllowedHeaders: 
              - '*'
            AllowedMethods: 
              - HEAD
              - GET
              - PUT
              - POST
            AllowedOrigins: 
              - '*'
            ExposedHeaders:
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
            MaxAge: 3000
      
    #DynamoDB
    GenAiQuizDB:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.dynamodb_name}
        AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GS1PK
          AttributeType: S
        - AttributeName: GS1SK
          AttributeType: S
        KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GS1
            KeySchema:
              - AttributeName: GS1PK
                KeyType: HASH
              - AttributeName: GS1SK
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    #IoT

    IOTRealtime:
      Type: "AWS::IoT::Thing"
      Properties:
        ThingName: ${self:custom.iot_name}
        AttributePayload:
          Attributes: {}

    GetIoTEndpoint:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: ${self:service}-getIoTEndpoint
        Handler: index.handler
        Runtime: nodejs16.x
        Code:
          ZipFile: |
            const aws = require("aws-sdk")

            exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))

              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                sendResponse(event, context, "SUCCESS")
                return
              }

              const iot = new aws.Iot()
              iot.describeEndpoint({
                endpointType: "iot:Data-ATS",
              }, (err, data) => {
                let responseData, responseStatus
                if (err) {
                  responseStatus = "FAILED"
                  responseData = { Error: "describeEndpoint call failed" }
                  console.log(responseData.Error + ":\n", err)
                } else {
                  responseStatus = "SUCCESS"
                  responseData = { IotEndpointAddress: data.endpointAddress }
                  console.log("response data: " + JSON.stringify(responseData))
                }

                sendResponse(event, context, responseStatus, responseData)
              })
            }

            // Send response to the pre-signed S3 URL
            function sendResponse(event, context, responseStatus, responseData) {
              let responseBody = JSON.stringify({
                Status: responseStatus,
                Reason: `CloudWatch Log Stream: ${context.logStreamName}`,
                PhysicalResourceId: context.logStreamName,
                StackId: event.StackId,
                RequestId: event.RequestId,
                LogicalResourceId: event.LogicalResourceId,
                Data: responseData,
              })

              console.log("RESPONSE BODY:\n", responseBody)

              const https = require("https")
              const url = require("url")

              let parsedUrl = url.parse(event.ResponseURL)
              let options = {
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.path,
                method: "PUT",
                headers: {
                  "content-type": "",
                  "content-length": responseBody.length,
                },
              }

              console.log("SENDING RESPONSE...\n")

              const request = https.request(options, function (response) {
                console.log("STATUS: " + response.statusCode)
                console.log("HEADERS: " + JSON.stringify(response.headers))
                // Tell AWS Lambda that the function execution is done
                context.done()
              })

              request.on("error", function (error) {
                console.log("sendResponse Error:" + error)
                // Tell AWS Lambda that the function execution is done
                context.done()
              })

              // write data to request body
              request.write(responseBody)
              request.end()
              }
        Role: !GetAtt LambdaFunctionRoleIoT.Arn

    LambdaFunctionRoleIoT:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                  - 'sts:AssumeRole'
        Policies:
          - PolicyName: lambda-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - iot:DescribeEndpoint
                  Resource: '*'

    GetIoTEndpointLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Ref GetIoTEndpoint

    IotEndpoint:
      Type: 'Custom::IotEndpoint'
      Properties:
        ServiceToken: !GetAtt GetIoTEndpoint.Arn


outputs:
  GenerateQuestionStateMachine:
      Description: The ARN of the GenerateQuestion state machine
      Value:
        Ref: GenerateQuestionMachine
  DynamoDbId:
      Description: The ARN of the DynamoDB
      Value:
        Ref: GenAiQuizDB
